/* ReWebSocket.js | https://rewebsocket.html5.web.id | https://github.com/fitraditya/ReWebSocket | MIT License */
"use strict";!function(global,factory){"function"==typeof define&&define.amd?define([],factory):"undefined"!=typeof module&&module.exports?module.exports=factory():global.ReWebSocket=factory()}(this,function(){function ReWebSocket(url,protocol,options){function getReadyState(){self.readyState=ws?ws.readyState:0}function destroy(){self.attempt=0,self.closed=!1,self.onstop(null)}var defaultOptions={debug:!1,reconnect:!0,interval:5e3,maxAttempts:0,useOfflinejs:!1};void 0===options&&(options={});for(var key in defaultOptions)options.hasOwnProperty(key)||(options[key]=defaultOptions[key]);null!==protocol&&"string"==typeof protocol&&(protocol=[protocol]);var self=this;self.url=url,self.protocol=protocol,self.options=options,self.readyState=0,self.binaryType="blob",self.attempt=0,self.closed=!1,self.timeoutInterval=null;var ws=null;self.open=function(attempt){if(!ws){if(self.options.maxAttempts>0&&attempt>=self.options.maxAttempts)return console.error("Maximum reconnect attempts reached."),void destroy();self.options.debug&&console.warn("Reconnecting, attempt "+attempt),self.onreopen(null),self.attempt++,ws=self.protocol?new WebSocket(self.url,self.protocol):new WebSocket(self.url),ws.binaryType=self.binaryType,ws.onopen=function(event){getReadyState(),self.attempt=0,self.onopen(event)},ws.onmessage=function(event){getReadyState(),self.onmessage(event)},ws.onclose=function(event){getReadyState(),ws=null,self.options.reconnect||(self.closed=!0),self.closed?(self.onclose(event),destroy()):(self.options.debug&&console.warn("WebSocket connection closed. Reconnecting."),setTimeout(function(){self.open(self.attempt)},self.options.interval))},ws.onerror=function(event){getReadyState(),self.onerror(event)}}},self.open(self.attempt),self.options.useOfflinejs&&("Offline"in window?(self.Offline=Offline,Offline.on("down",function(){!ws||ws.readyState===WebSocket.CLOSING&&ws.readyState===WebSocket.CLOSED||ws.close()})):console.error("Your have to manually include offline.js in your application.")),self.send=function(data){ws?(ws.binaryType=self.binaryType,ws.send(data)):console.error("Invalid WebSocket state while sending data.")},self.close=function(){ws?(self.closed=!0,ws.close()):console.error("Invalid WebSocket state while closing connection.")}}return"WebSocket"in window?(ReWebSocket.prototype.onopen=function(event){},ReWebSocket.prototype.onclose=function(event){},ReWebSocket.prototype.onconnecting=function(event){},ReWebSocket.prototype.onmessage=function(event){},ReWebSocket.prototype.onerror=function(event){},ReWebSocket.prototype.onreopen=function(event){},ReWebSocket.prototype.onstop=function(event){},ReWebSocket):void console.error("Your browser doesn't support WebSocket.")});